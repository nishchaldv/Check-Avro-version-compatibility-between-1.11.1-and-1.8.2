import org.apache.avro.Schema;
import org.apache.avro.file.DataFileReader;
import org.apache.avro.file.DataFileWriter;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericDatumReader;
import org.apache.avro.generic.GenericDatumWriter;
import org.apache.avro.generic.GenericRecord;

import java.io.File;
import java.io.IOException;

public class SchemaEvolCheckin8_2from11_1 {
    public static void main(String[] args) throws IOException {
        // Load the Avro data file with the old schema
        File inputFile = new File("/path/to/avrofiles/avrofile_gen_from1_11_1_for_schema_check.avro");
        GenericDatumReader<GenericRecord> datumReader = new GenericDatumReader<>();
        DataFileReader<GenericRecord> dataFileReader = new DataFileReader<>(inputFile, datumReader);

        // Get the old schema from the input file
        Schema oldSchema = dataFileReader.getSchema();

        // Define the new schema
        Schema newSchema = new Schema.Parser().parse("{\n" +
                "  \"namespace\": \"tutorialspoint.com\",\n" +
                "  \"type\": \"record\",\n" +
                "  \"name\": \"emp\",\n" +
                "  \"fields\": [\n" +
                "    {\"name\": \"name\", \"type\": \"string\"},\n" +
                "    {\"name\": \"id\", \"type\": \"int\"},\n" +
                "    {\"name\": \"salary\", \"type\": \"int\"},\n" +
                "    {\"name\": \"age\", \"type\": \"int\"},\n" +
                "    {\"name\": \"address\", \"type\": \"string\"},\n" +
                "    {\"name\": \"department\", \"type\": \"string\"}\n" +
                "  ]\n" +
                "}");

        // Create a new Avro data file with the updated schema
        GenericDatumWriter<GenericRecord> datumWriter = new GenericDatumWriter<>(newSchema);
        DataFileWriter<GenericRecord> dataFileWriter = new DataFileWriter<>(datumWriter);
        dataFileWriter.create(newSchema, new File("/path/to/avrofiles/modified_avrofile_gen_from1_8_2_for_schema_evol.avro"));

        // Iterate over the records in the old Avro data file, convert to the new schema, and write to the new file
        while (dataFileReader.hasNext()) {
            GenericRecord oldRecord = dataFileReader.next();
            GenericRecord newRecord = new GenericData.Record(newSchema);

            // Copy fields from the old record to the new record
            for (Schema.Field field : oldRecord.getSchema().getFields()) {
                String fieldName = field.name();
                Object fieldValue = oldRecord.get(fieldName);
                newRecord.put(fieldName, fieldValue);
            }

            // Add a new field "department" of type "string" to the new record
            newRecord.put("department", "Unknown");

            // Write the updated record to the output file
            dataFileWriter.append(newRecord);
        }

        // Close the file readers and writers
        dataFileReader.close();
        dataFileWriter.close();
        String version = Schema.class.getPackage().getImplementationVersion();
        System.out.println("Apache Avro version: " + version);
        System.out.println("avro file data is updated using new schema by taking the avro file generated by the old schema to check the schema evolution compatibility between 1.8.2 version and 1.11.1 check sucessful");
    }
}
